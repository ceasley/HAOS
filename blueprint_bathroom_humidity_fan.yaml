blueprint:
  name: Bathroom Humidity Fan (smart on/off with hysteresis)
  description: >
    Turns ON a bathroom exhaust fan when humidity is high, then turns it OFF after humidity
    drops back below a threshold for a sustained period. Includes minimum run-time to prevent
    short cycling. Works with any humidity sensor + fan entity.
  domain: automation
  input:
    humidity_sensor:
      name: Humidity sensor
      selector:
        entity:
          domain: sensor
          device_class: humidity
    fan_entity:
      name: Fan
      selector:
        entity:
          domain: fan
    on_threshold:
      name: Humidity ON threshold (%)
      default: 60
      selector:
        number: {min: 30, max: 100, unit_of_measurement: "%", mode: slider}
    off_threshold:
      name: Humidity OFF threshold (%)
      description: "Fan will turn OFF when humidity <= this value for 'off_sustain' minutes."
      default: 55
      selector:
        number: {min: 20, max: 100, unit_of_measurement: "%", mode: slider}
    off_sustain:
      name: OFF sustain (minutes)
      description: "How long humidity must stay below 'off_threshold' before turning OFF."
      default: 10
      selector:
        number: {min: 1, max: 60, unit_of_measurement: "min", mode: slider}
    min_runtime:
      name: Minimum run-time (minutes)
      description: "Guarantee the fan runs at least this long once turned ON."
      default: 8
      selector:
        number: {min: 1, max: 60, unit_of_measurement: "min", mode: slider}

mode: restart
max_exceeded: silent

trigger:
  - platform: numeric_state
    entity_id: !input humidity_sensor
    above: !input on_threshold
  - platform: state
    entity_id: !input humidity_sensor

variables:
  hum: "{{ states(!input humidity_sensor) | float(0) }}"
  on_thr: !input on_threshold
  off_thr: !input off_threshold
  off_for: !input off_sustain
  min_run: !input min_runtime

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ hum >= on_thr }}"
          - condition: state
            entity_id: !input fan_entity
            state: "off"
        sequence:
          - service: fan.turn_on
            target: { entity_id: !input fan_entity }
          - wait_for_trigger:
              - platform: time
                for:
                  minutes: "{{ min_run | int }}"
            continue_on_timeout: true

  - wait_for_trigger:
      - platform: template
        value_template: >
          {{ states(!input humidity_sensor) | float(0) <= off_thr }}
    continue_on_timeout: false

  - delay:
      minutes: "{{ off_for | int }}"

  - condition: template
    value_template: >
      {{ states(!input humidity_sensor) | float(0) <= off_thr }}

  - service: fan.turn_off
    target: { entity_id: !input fan_entity }
